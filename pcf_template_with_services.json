
{
  "Description": "Template for configuring Pivotal Cloud Foundry on AWS",
  "Outputs":
  {
    "00OpsManDNS" : {
      "Value" : { "Fn::GetAtt": [ "OpsManagerInstance", "PublicDnsName" ] },
      "Description" : "The public DNS name of your OpsManger"
    },
    "01ElasticLoadBalancer" : {
      "Description": "The DNSName of the PCF Elastic Load Balancer",
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}
   },
    "02AccessKeyID": {
      "Value" : { "Ref" : "myaccesskey" },
      "Description" : "Copy value to AWS Management Console Config->Access Key ID"
    },
    "03AWSSecretKey":{
      "Value" : { "Fn::GetAtt" : [ "myaccesskey", "SecretAccessKey" ]},
      "Description" : "Copy value to AWS Management Console Config->AWS Secret Key"
    },
    "04VPCID" : {
      "Value" : { "Ref" : "PCFVPC" },
      "Description" : "Copy value to AWS Management Console Config->VPC ID"
    },
   "05SecurityGroupName": {
      "Value": "https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#SecurityGroups:search=pcfvms;sort=groupId",
      "Description" : "Click on the URL to the right, highlight the pcfVMs group, copy the 'Group Name' value from the Description in the lower window to AWS Management Console Config->VPC ID"
    },
   "06KeyPairName":{
      "Value": { "Ref": "KeyName"},
      "Description" : "Copy value to AWS Management Console Config->Key Pair Name"
    },
   "07SSHPrivateKey":{
      "Value": "TODO - add link directions here",
      "Description" : "Click on the URL to the right, copy the 'Private Key' value AWS Management Console Config->SSH Private Key"
    },
   "08AccessKeyID": {
      "Value" : { "Ref" : "myaccesskey" },
      "Description" : "Copy value to Director Config->Amazon S3->Access Key"
    },
   "09AWSSecretKey":{
      "Value" : { "Fn::GetAtt" : [ "myaccesskey", "SecretAccessKey" ]},
      "Description" : "Copy value to Director Config->Director Config->Amazon S3->Secret Key"
    },
    "15AmazonAvailabilityZone": {
      "Value": {"Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWSRegion" }  } ] },
      "Description": "Copy value to Create Availability Zones->Amazon Availability Zone"
    },
    "16NetworkName":{
      "Value":"PCFNetwork",
      "Description": "Copy value to Create Network->Name"
    },
    "17VPCSubnetId":{
      "Value" : { "Ref" : "PrivateSubnetAZ1" },
      "Description" : "Copy value to Create Network->VPC Subnet ID"
    },
    "18SubnetCIDRRange":{
      "Value":"10.0.16.0/20",
      "Description":"Suggested default value for Create Network->Subnet (CIDR Range)"
    },
    "19ExcludedIPRanges":{
      "Value":"10.0.16.1-10.0.16.9",
      "Description":"Suggested default value for Create Network->Excluded IP Ranges"
    },
    "20DNS":{
      "Value":"10.0.0.2",
      "Description":"Suggested default value for Create Network->DNS"
    },
    "21Gateway":{
      "Value":"10.0.16.1",
      "Description":"Suggested default value for Create Network->Gateway"
    },
    "22ElasticRuntimeConfigs": {
      "Value" : ""
    },
    "28AccessKeyID": {
      "Value" : { "Ref" : "myaccesskey" },
      "Description" : "Copy value to File Storage Config->Amazon S3->Access Key"
    },
   "29AWSSecretKey":{
      "Value" : { "Fn::GetAtt" : [ "myaccesskey", "SecretAccessKey" ]},
      "Description" : "Copy value to File Storage Config->Amazon S3->Secret Key"
    }
  },
  "Parameters": {
    "PCFFoundationGroupID": {
      "AllowedPattern": "[-a-zA-Z0-9]*",
      "ConstraintDescription": "Alphanumeric characters and dashes only",
      "Type": "String",
      "MinLength": "5",
      "MaxLength": "32",
      "Description": "Enter PCF foundation group ID that the instructor has provided. (This is the IAMS user group name that was created for this class.)  This can also be used as the Ops Manager web admin password."
    },
    "ElasticRuntimeURL": {
      "Type": "String",
      "Default" : "https://s3.amazonaws.com/pcf-training/cf-1.4.2.0.pivotal",
      "Description": "Enter the optional URL to desired Elastic Runtime to download and import"
    },
     "MySQLURL": {
      "Type": "String",
      "Default" : "https://s3.amazonaws.com/pcf-training/p-mysql-1.5.0.0.pivotal",
      "Description": "Optional URL to desired MySQL Service to download and import"
    },
    "JenkinsURL": {
      "Type": "String",
      "Default" : "https://s3.amazonaws.com/pcf-training/p-jenkins-1.3.8.3.pivotal",
      "Description": "Optional URL to desired Cloudbees Jenkins Service to download and import"
    },
     "OpsMetricsURL": {
      "Type": "String",
      "Default" : "https://s3.amazonaws.com/pcf-training/p-metrics-1.4.0.0.pivotal",
      "Description": "Optional URL to desired Ops Metrics Service to download and import"
    },
    "OpsMgrWebUID": {
      "Type": "String",
      "Default": "admin",
      "Description": "Ops Manager Web Username (will create) - admin is default"
    },
    "OpsManagerInstanceType" : {
      "Description" : "Instance type for Ops Manager",
      "Type" : "String",
      "Default" : "m3.large",
      "AllowedValues" : ["m3.large","m3.xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "OpsMgrWebPW": {
      "Type": "String",
      "NoEcho": "true",
      "Default": "password",
      "Description": "Ops Manager Web Password - (default is password, recommend using the PCFFoundationGroupID value)"
    },
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "Alphanumeric characters, underscores, dashes only",
      "Description": "Existing key pair to access instances.  Note: You will require the PEM file created, so if you don't have one you should create your own key-pair to obtain the PEM file.",
      "Default": "pcf",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "String"
    },
    "OpsMgrAMI": {
      "Type": "String",
      "Default": "ami-a03126c8",
      "Description": "Enter Ops Manager AMI"
    },
    "AWSRegion": {
      "Type": "String",
      "Default": "us-east-1",
      "Description": "AWS Region"
    },
    "NatInstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.large",
        "c4.large",
        "m3.xlarge",
        "c4.xlarge",
        "c4.8xlarge"
      ],
      "ConstraintDescription": "Instance type must be of a valid EC2 type",
      "Default": "t2.medium",
      "Description": "EC2 instance type for NAT instances",
      "Type": "String"
    }
  },
  "Resources": {

"PcfInternalUserID" : {
   "Type" : "AWS::IAM::User",
   "Properties" : {
      "Path" : "/",
      "Groups" : [
        { "Ref" : "PCFFoundationGroupID" }
      ],
      "LoginProfile" : {
         "Password" : "p@lto14NH"
      }

   }
},
"myaccesskey" : {
   "Type" : "AWS::IAM::AccessKey",
   "Properties" : {
      "UserName" : { "Ref" : "PcfInternalUserID" }
   }
 },
"mypolicy":{
   "Type": "AWS::IAM::Policy",
   "Properties": {
      "PolicyName": "pcfpolicy",
      "PolicyDocument": {
  "Version": "2012-10-17",
  "Statement": [
    {
        "Effect": "Deny",
        "Action": [
            "iam:*"
        ],
        "Resource": [
            "*"
        ]
    },
    {
        "Sid": "OpsMgrInfrastructureIaasConfiguration",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeKeypairs",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeAvalibilityZones",
            "ec2:DescribeAccountAttributes"
        ],
        "Resource": "*"
    },
    {
        "Sid": "OpsMgrInfrastructureAvilibilityZones",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeAvailabilityZones"
        ],
        "Resource": "*"
    },
    {
        "Sid": "OpsMgrInfrastructureNetworks",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeSubnets"
        ],
        "Resource": "*"
    },
    {
        "Sid": "DeployMicroBosh",
        "Effect": "Allow",
        "Action": [
            "ec2:DescribeImages",
            "ec2:RunInstances",
            "ec2:DescribeInstances",
            "ec2:TerminateInstances",
            "ec2:RebootInstances",
            "ec2:CreateSnapshot",
            "ec2:DeleteSnapshot",
            "ec2:DescribeSnapshots",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "ec2:DescribeAddresses",
            "ec2:DisassociateAddress",
            "ec2:AssociateAddress",
            "ec2:CreateTags",
            "ec2:DescribeVolumes",
            "ec2:CreateVolume",
            "ec2:AttachVolume",
            "ec2:DeleteVolume",
            "ec2:DetachVolume"
        ],
        "Resource": "*"
     }
   ]
   },

      "Users": [ { "Ref": "PcfInternalUserID" } ]
    }

   },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "NatEip1": {
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NatInstance1"
        }
      },
      "Type": "AWS::EC2::EIP"
    },
    "OpsManagerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": { "Ref" : "OpsMgrAMI" },
        "InstanceType": { "Ref" : "OpsManagerInstanceType" },
        "KernelId": "aki-919dcaf8",
        "KeyName": { "Ref" : "KeyName" },
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/sda1",
                  "Ebs" : {
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "100"
                  }
               }
            ],
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "-", [ "OpsManager", { "Ref": "AWS::StackName"} ] ] }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
            "#!/bin/bash -ex","\n",
             "sleep 45","\n",
            "## This sleep just makes sure opsmanager gets started up before doing curl below - probably better way to do this","\n",
            "curl --insecure \"https://localhost/api/users\" -d 'user[user_name]=",{ "Ref" : "OpsMgrWebUID" },"&user[password]=",{ "Ref" : "OpsMgrWebPW" },"&user[password_confirmation]=",{ "Ref" : "OpsMgrWebPW" },"' -X POST","\n",
            "printf 'create database uaa;\ncreate database ccdb;\ncreate database console;\ncreate database notifications;\ncreate database autoscale;\ncreate database app_usage_service;\n' > /tmp/createdb.sql","\n",
            "erurl=",{"Ref": "ElasticRuntimeURL"},"\n",
            "mysqlurl=",{"Ref": "MySQLURL"},"\n",
            "jenkinsurl=",{"Ref": "JenkinsURL"},"\n",
            "opsmetricsurl=",{"Ref": "OpsMetricsURL"},"\n",
            "if [ ${#erurl} -gt 5 ]; then","\n",
              "wget -P /tmp $erurl","\n",
              "#### Dynamic Name from file not working due to variable inside single quotes ### - curl 'https://localhost/api/products' -F 'product[file]=@/tmp/${erurl##*/}' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
              "curl 'https://localhost/api/products' -F 'product[file]=@/tmp/cf-1.4.2.0.pivotal' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "fi","\n",
            "if [ ${#mysqlurl} -gt 5 ]; then","\n",
              "wget -P /tmp $mysqlurl","\n",
              "#### Dynamic Name from file not working due to variable inside single quotes ### - curl 'https://localhost/api/products' -F 'product[file]=@/tmp/${mysqlurl##*/}' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
              "curl 'https://localhost/api/products' -F 'product[file]=@/tmp/p-mysql-1.5.0.0.pivotal' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "fi","\n",
            "if [ ${#jenkinsurl} -gt 5 ]; then","\n",
              "wget -P /tmp $jenkinsurl","\n",
              "#### Dynamic Name from file not working due to variable inside single quotes ### - curl 'https://localhost/api/products' -F 'product[file]=@/tmp/${jenkinsurl##*/}' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
              "curl 'https://localhost/api/products' -F 'product[file]=@/tmp/p-jenkins-1.3.8.3.pivotal' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "fi","\n",
            "if [ ${#opsmetricsurl} -gt 5 ]; then","\n",
              "wget -P /tmp $opsmetricsurl","\n",
              "#### Dynamic Name from file not working due to variable inside single quotes ### - curl 'https://localhost/api/products' -F 'product[file]=@/tmp/${opsmetricsurl##*/}' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
              "curl 'https://localhost/api/products' -F 'product[file]=@/tmp/p-metrics-1.4.0.0.pivotal' -X POST -k -u ",{ "Ref" : "OpsMgrWebUID" },":",{ "Ref" : "OpsMgrWebPW" },"\n",
            "fi","\n",
             "touch /tmp/done.txt","\n"
        ]]}},
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetAZ1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.88",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "OpsManager"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },

    "NatInstance1": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "ImageId": "ami-184dc970",
        "InstanceType": {"Ref": "NatInstanceType"},
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "-", [ "Nat", { "Ref": "AWS::StackName"} ] ] }
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "OpsManager": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Ops Manager Security Group",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Opsmgr_Sec_Group"
          }
        ]
      }
    },
    "NatSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow NAT access from the VPC",

        "SecurityGroupIngress": [

          {
            "CidrIp": "10.0.0.0/16",
            "IpProtocol": "-1"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "OutboundNAT"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "pcfVMs": {
      "Properties": {
        "GroupDescription": "PCF VMs Security Group",

        "SecurityGroupIngress": [

          {
            "CidrIp": "10.0.0.0/16",
            "IpProtocol": "-1"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "pcfVMs"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
     "MySQLSecurityGroup": {
      "Properties": {
        "GroupDescription": "MySQL Security Group for PCF",

        "SecurityGroupIngress": [


          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "ToPort": "3306"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "MySQLSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
     "PCFELBSecurityGroup": {
      "Properties": {
        "GroupDescription": "PCF Elastic Load Balancer SecurityGroup",

        "SecurityGroupIngress": [


          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "4443",
            "IpProtocol": "tcp",
            "ToPort": "4443"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": "PCF_ELB_SecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
    "PrivateRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatInstance1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWSRegion" }} ] },
        "CidrBlock": "10.0.16.0/20",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "pcf-private-az1"
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" :  { "Ref" : "AWSRegion" } } ] },
        "CidrBlock": "10.0.0.1/24",
        "VpcId": {
          "Ref": "PCFVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public-az1"
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"

    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
       "LoadBalancerName": { "Fn::Join" : [ "-", [ { "Ref": "AWS::StackName"}, "elb" ] ] },
       "Subnets": [
          {
            "Ref":"PublicSubnetAZ1"           }
        ],
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "10",
          "Target": "TCP:80",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
             "Ref": "PCFELBSecurityGroup"           }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      }
    },
       "PublicSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PCFVPC": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PCF"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "VPCGatewayAttachment": {
      "DependsOn": "InternetGateway",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "PCFVPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
  }
}